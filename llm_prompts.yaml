# LLM Prompts Configuration

# 歪み判定プロンプト
dewarping_judgment:
  system_prompt: |
    あなたは、画像中に映っている文書について以下の項目で評価を行うAIです。あなた自身の目で入念に画像を確認し、正確な評価を行って下さい。
    **評価項目：**
    * 文書が写真で撮影されていて、書面領域の外側に、余計なもの（壁や机、その他オブジェクトなど）が映り込んでいるか？
    * 視覚的に明らかな歪みや傾きが存在していているかどうか？(注意: わずかな傾きや歪みは無視しなければならない)
    * 文字の識別が困難なレベルであるかどうか？（例：文字がぼやけている、色が薄い、背景と同化しているなど）

  user_prompt: |
    以下のJSON形式で出力してください：
    ```json
    {
      "has_something_out_of_document": "True or False",
      "needs_dewarping": "True or False",
      "dewarping_comment": "評価基準と照らし合わせたコメント",
      "readability_issues": "none or minor or major",
      "confidence_score": 0.85,
      "overall_comment": "詳細なコメント"
    }```
    ただし、
    - has_something_out_of_document の評価において、背景が白い背景であった場合は必ず False としてください。
    - needs_dewarping の評価は、以下の条件いずれか１つに厳密に該当する場合にのみ True としてください。** 軽微な歪み、わずかな傾きしかない場合は False として、この判断基準を厳密に守ってください。**
      - 文書自体に視覚的に**明らかな**湾曲や歪みがある場合。
      - 文書にパースペクティブの歪み（例：台形歪み、遠近法による縮小など）がある場合。
      - テキスト行が水平線に対して**明確に**傾いている場合
      （ここで 90度あるいは180度の回転は歪みや傾きとは捉えないようにしてください。）

    - readability_issuesは以下の値で判断してください:
      "None": 文字に問題がなく、明瞭に読める。
      "minor": 低確率であるが判読できない可能性のある文字がある。
      "major": 高確率で判読できない可能性のある文字がある。

# 回転方向判定プロンプト ★ の色で判定 ({{}} format エラーを避けるため)
orientation_judgment:
  system_prompt: |
    あなたは文書画像の向きを判定するAIアシスタントです。
    提供された画像が正しい向きで表示されているか、回転が必要かを判定します。
    文字や記号、文書の構造を見て正確に判定してください。

  user_prompt: |
    この画像の向きを判定してください。画像に含まれる文字や文書構造を見て、人間が普通に読める向きになっているかを確認してください。
    
    **重要な判定基準：**
    - 日本語の文字が正しい向きで読めるか
    - 文書のレイアウトが自然に見えるか
    - 既に正しい向きの場合は回転不要と判定してください
    
    以下のJSON形式で出力してください：
    ```json
    {
      "rotation_needed": false,
      "recommended_angle": 0,
      "confidence_score": 0.95,
      "reasoning": "日本語の文字が正しい向きで表示されており、回転は不要",
      "text_readability": "readable"
    }
    ```

    - rotation_needed: 回転が必要かどうか（true/false）
    - recommended_angle: 回転角度（0, 90, -90, 180のいずれか）
      - 0: 回転不要（正しい向き）
      - 90: 時計回りに90度回転
      - -90: 反時計回りに90度回転  
      - 180: 180度回転（上下反転）
    - confidence_score: 判定の信頼度（0.0-1.0）
    - reasoning: 判定理由の詳細説明
    - text_readability: テキストの読みやすさ（readable/difficult/unreadable）

  system_template: |
    あなたは文書画像の向きを判定するアシスタントです。ラウンド={round_label} ペア index={pair_index}。
    2枚のストリップ画像のうち、どちらの画像が正しい向き(人間が普通に読む向き)に映っているかを判定します。
    判定は星の色で必ず英語の小文字。出力は単一JSONのみ。
  user_template: |
    2枚の文書ストリップ画像があります。どちらの画像が正しい向き(人間が普通に読む向き)に映っていますか?
    星の色で答えてください。許される色は {colors_list} のどちらかです。ただし、判定不能な場合は、"unknown" としてください。
    出力は JSON のみ。形式: {{"answer":"<color>","reason":"短い根拠(50字以内)"}}
    説明文・コードフェンス・余計な文字は禁止。色は小文字で {colors_list} のいずれか。

# ページ数等カウント判定プロンプト
page_count_etc_judgment:
  system_prompt: |
    あなたは、画像中に映っている文書について以下の項目で評価を行うAIです。あなた自身の目で入念に画像を確認し、正確な評価を行って下さい。
      評価項目：    
      **評価項目：**
      * 表形式を含んでいるか？
      * 手書きの書き込み、線、汚れなどがあるか？
      * 書類に書かれている文書が見開き2ページとして捉えられるものか？
      * 文字の視認性は困難なレベルであるか?
  
  user_prompt: |
    以下のJSON形式で出力してください：
    ```json
    {
      "has_table_elements": "True or False",
      "has_handwritten_notes_or_marks": "True or False",
      "page_count": "2",
      "page_count_confidence": 0.90,
      "confidence_score": 0.85,
      "readability_issues": "none or minor or major",
      "readability_comment": "文書構造の特徴を記述",
      "overall_comment": "ページ構造の詳細な説明"
    }```

    **重要: ページ数判定の基準を厳密に適用してください：**

    - page_countは以下の値のみ使用してください：
      1: 画像全体が、単一の連続したレイアウトとテキストの流れを持つ、一つの文書ページとして表示されている場合。署名欄、単一ページの条項なども含む。
      2: **真の見開きページのみ**。左右に完全に独立した文書構造があり、それぞれが独立したページとして機能している場合。条項番号が左右で大きく異なる場合や、明確に2つの独立した文書セクションがある場合のみ。
      3: 画像内に、3つ以上の独立したページブロックが含まれていると判断された場合。

    **具体的な判定基準：**
    - **署名欄、当事者情報、文書末尾の条項**: 必ず1とする
    - **左右に分かれた内容の評価**:
      - 内容が完全に連続している（番号が1つずつ順次続いている）場合: 1とする
      - **重要**: 左右で章・節・条項番号に飛びがある場合（例：左側最後が第8条、右側最初が第16条）: 必ず2とする
      - 左右のレイアウトが明確に独立した文書構造を形成している場合: 2とする
    - **見開き構造の確認**: 左右で独立した章・節・条項グループがあり、レイアウトが明確に2分割されていれば2とする
    - **判定パターン**: 
      - **左右で完全に連続した内容（第n条→第n+1条）がある場合** → page_count=1
      - **左右で条項番号に飛び（第n条→第n+8条など）がある場合** → page_count=2
      - **文書末尾部分（署名欄等）がある場合** → page_count=1  
      - **単一レイアウト内で内容が連続している場合** → page_count=1
    
    **重要**: 左右で条項番号を詳細に確認し、番号が飛んでいる（非連続）場合は必ず2とすること。例えば左側が第8条で終わり右側が第16条で始まる場合、これは明確な非連続なので2とする
      
    - readability_issuesは以下の値で判断してください:
      "None": 文字に問題がなく、明瞭に読める。
      "minor": 低確率であるが判読できない可能性のある文字がある。
      "major": 高確率で判読できない可能性のある文字がある。

# OCR実行プロンプト
ocr_extraction:
  system_prompt: |
    以下の画像群に書かれた日本語の契約文書について、書かれている内容をあなたの目で見て正確に書き起こしてください。
    - 添付された画像のうち、1枚目が契約書全体のページ画像です。
    - 2〜6枚目は1枚目を細かく分割・拡大した画像で、1枚目と2枚目以降を照らし合わせながら正確に読み取ってください。
    - 契約書に表が含まれている場合は、以下のようにマークダウン形式で再現してください：

        | 項目 | 内容 |
        |------|------|
        | ○○  | △△△ |

    - 手書き、赤線、メモなどが確認できた場合はすべて書き出してください。
    - 語時と思われる箇所もできるだけ正確に書かれている通りに出力してください。
      - その上で、誤字と思われる箇所があれば以下の形式で指摘してください：
      - 例：
        「対象会社株式会社」→「対象会社」あるいは「株式会社〇〇」の誤記の可能性
    - 決して外部のOCR機能に頼ることなく、あなたの目で見て判断した文字を正確に書き出してください。

  user_prompt: |
    この画像からテキストを抽出してください。以下のJSON形式で出力してください：

    {
      "extracted_text": "抽出されたテキスト全体",
    }

# 複数画像OCR統合プロンプト
ocr_combination:
  system_prompt: |
    あなたは複数の画像から抽出されたOCRテキストを統合し、一つの連続した文書として再構成するシステムです。

    指示：
    1. 各画像のテキストを適切な順序で結合
    2. 重複する部分を検出・除去
    3. 分割により途切れた文章を自然に接続
    4. 全体の文書構造を整理

  user_prompt: |
    以下は文書を5等分した画像から抽出されたテキストです。これらを統合して完全な文書として再構成してください：

    画像1（上部）: {text_1}
    画像2: {text_2}
    画像3（中央）: {text_3}
    画像4: {text_4}
    画像5（下部）: {text_5}

    以下のJSON形式で出力してください：

    {
      "combined_text": "統合されたテキスト全体",
      "merge_quality": 0.9,
      "detected_overlaps": [],
      "corrections_made": [],
      "structure_notes": "文書構造の説明"
    }

# 複数画像一括OCRプロンプト
multi_image_ocr:
  system_prompt: |
    あなたは文書画像からテキストを抽出するOCRアシスタントです。
    提供された画像を詳細に読み取り、正確にテキストを抽出してください。
    
    画像について：
    - 1枚目: 元画像（ページ全体）
    - 2〜6枚目: 1枚目を分割・拡大した詳細画像
    - 全ての画像を総合して、完全なテキストを抽出してください
    
    抽出ルール：
    - 一文字も省略せず、正確に読み取る
    - 改行・段落構造を保持
    - 表がある場合はマークダウン形式で記録
    - 手書きメモや修正箇所も含める
    - 必ず指定されたJSON形式で出力

  user_prompt: |
    この画像からテキストを抽出し、以下の**厳密なJSON形式**で出力してください：

    ```json
    {
      "extracted_text": "ここに抽出したテキスト全体"
    }
    ```

    **重要な注意事項:**
    - 必ずJSON形式で出力してください
    - ```json から始まり ``` で終わってください  
    - extracted_textの値は文字列として記録
    - JSON以外の説明文や追加コメントは不要
    - 改行は \n で表現